name: Poll for Container URL

on:
  repository_dispatch:
    types: [poll-container-url]

jobs:
  poll:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Extract inputs from repository_dispatch event
      - name: Extract inputs
        id: inputs
        run: |
          echo "pr_number=${{ github.event.client_payload.pr_number }}" >> $GITHUB_OUTPUT
          echo "container_id=${{ github.event.client_payload.container_id }}" >> $GITHUB_OUTPUT

      # Step 3: Make script executable and run it safely
      - name: Poll until container URL is ready
        run: |
          # Ensure script exists
          if [ ! -f scripts/check_url.sh ]; then
            echo "❌ scripts/check_url.sh not found!"
            exit 1
          fi

          chmod +x scripts/check_url.sh

          # Run script but capture only the final URL to avoid GITHUB_ENV errors
          URL=$(./scripts/check_url.sh "${{ steps.inputs.outputs.container_id }}" | tail -n 1 || true)
          echo "container_url=$URL" >> $GITHUB_ENV
          echo "Container URL: $URL"

      # Step 4: Fetch JSON from the container URL (simulated)
      - name: Fetch JSON
        id: fetch
        run: |
          # Simulate JSON response (replace with real curl if needed)
          RESPONSE='{"sample_url": "https://files.example.com/artifact-123.zip"}'
          echo "Response: $RESPONSE"
          SAMPLE_URL=$(echo "$RESPONSE" | jq -r '.sample_url')
          echo "sample_url=$SAMPLE_URL" >> $GITHUB_OUTPUT

      # Step 5: Print results (simulate PR comment)
      - name: Print result
        run: |
          echo "✅ Container ID: ${{ steps.inputs.outputs.container_id }}"
          echo "📦 URL: ${{ env.container_url }}"
          echo "🔗 Sample URL: ${{ steps.fetch.outputs.sample_url }}"
